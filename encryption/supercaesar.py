#!/usr/bin/python
import argparse
import importlib


nargs = 2
def generator(args):
    a, b = args[0], args[1]
    while True:
        yield a
        a, b = b, a + b


def cipher(c, index):
    return bytes([(int.from_bytes(c, 'little')%256+ index%256)%256])


def main():
    global nargs
    global generator

    parser = argparse.ArgumentParser(description = "Perform a caesar cipher with each letter's index being different and generated by a python generator")
    parser.add_argument('input', help = 'file to be encrypted/decrypted')
    parser.add_argument('output', help = 'output file')
    parser.add_argument('-k', '--key', help = 'python file (without the extension) that includes the generator defined as `generator(args)` and the number of args defined as `nargs`', required=False)
    parser.add_argument('-d', '--decrypt', help = 'decrypt instead of encrypt (default encrypt)', required=False, action='store_const', const='decrypt')
    parser.add_argument('-s', '--seed', help = 'the values passed to the generator', required=False, type=int, nargs='+')

    args = parser.parse_args()

    input_file = args.input
    output_file = args.output
    if args.key:
        import sys
        import getpass
        sys.path.append('/home/{0}/.local/keys'.format(getpass.getuser()))
        gen_import = importlib.import_module(format(args.key))
        generator = gen_import.generator
        nargs = gen_import.nargs
    encrypt = True
    if args.decrypt:
        encrypt = False
    seed = [1]*nargs
    if args.seed:
        for i in range(len(args.seed)):
            if i > nargs:
                break
            seed[i] = args.seed[i]

    gen = generator(seed)
    with open(input_file, 'rb') as inpf, open(output_file, 'wb') as outf:
        while True:
            c = inpf.read(1)
            if not c:
                break
            index = next(gen)
            index *= 1 if encrypt else -1
            outf.write(cipher(c, index))


if __name__ == '__main__':
    main()
